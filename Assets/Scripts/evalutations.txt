//different fitnessEvluation codes

//this one
void fitnessEvaluation() {
        //the bestInd saves what is the best one in the popStates
        int bestInd = -1;
        //the distance to obstacles is now also taken into account to determine the fitness.
        //this calculation is needed in the case of the goal moving, so that the bestFitness is recalculated, if it were a gloval variable and this wasn't done, it would save a fitness from a different goal or, in other words, another problem
        float distAux = distanceObstacles(robotState);//calculated only once, as this is the most CPU expensive element of the calculation
        float bestFitness;
        bool considerObstacles = false;
        if(distAux < segmentLength) {
            bestFitness = 1/Vector3.Distance(simulatedArm(robotState), goal.transform.position) - Mathf.Min(1/Mathf.Pow(distAux, 3), segmentLength * 10) - 1/distanceObstaclesFromPoint(simulatedArm(robotState)); //simplified the calculation and have unlimited both parts of the fitness calculation
            considerObstacles = true;
        }
        else
            bestFitness = 1/Vector3.Distance(simulatedArm(robotState), goal.transform.position);
        //this fitness calculation takes the distance to objectivo into a max value capped when the distance is smaller than a fourth of the distJoint and tops the distance to obstacles to a max of distJoint so that it wont get any more value of getting further than a joint distance
        for (int i = 0; i < popSize; i++){
            // Test individual arm end position
            Vector3 endPosition = simulatedArm(popStates[i]);
            //calculated the fitness, or distance to the goal
            float fitness;
            //calculated only once, as this is the most CPU expensive element of the calculation 
            if(considerObstacles){
                float distAux2 = distanceObstacles(popStates[i]);
                fitness = 1/Vector3.Distance(simulatedArm(popStates[i]), goal.transform.position) - Mathf.Min(1/Mathf.Pow(distAux2, 3), segmentLength * 1000000) - 1/distanceObstaclesFromPoint(simulatedArm(popStates[i])); // also considering the tip of the arm, but in a lower cost
                print("b: " + 1/Mathf.Pow(distAux2, 3));
            }
            else
                fitness = 1/Vector3.Distance(simulatedArm(popStates[i]), goal.transform.position);
            print("a: " + 1/Vector3.Distance(simulatedArm(popStates[i]), goal.transform.position));
            //checks if its better and saves its configuration
            if(fitness > bestFitness){
                bestInd = i;
                bestFitness = fitness;
                robotState = new List<float>(popStates[bestInd]);
            }
        }
        previousBestfitness = bestFitness;
    }

void fitnessEvaluation() {
        //the bestInd saves what is the best one in the popStates
        int bestInd = -1;
        //the distance to obstacles is now also taken into account to determine the fitness.
        //this calculation is needed in the case of the goal moving, so that the bestFitness is recalculated, if it were a gloval variable and this wasn't done, it would save a fitness from a different goal or, in other words, another problem
        float distAux = distanceObstacles(robotState);//calculated only once, as this is the most CPU expensive element of the calculation
        float bestFitness;
        bool considerObstacles = false;
        if(distAux < segmentLength) {
            bestFitness = 1/Vector3.Distance(simulatedArm(robotState), goal.transform.position) - 1/Mathf.Pow(distAux, 3) - 1/distanceObstaclesFromPoint(simulatedArm(robotState)); //simplified the calculation and have unlimited both parts of the fitness calculation
            considerObstacles = true;
        }
        else
            bestFitness = 1/Vector3.Distance(simulatedArm(robotState), goal.transform.position);
        //this fitness calculation takes the distance to objectivo into a max value capped when the distance is smaller than a fourth of the distJoint and tops the distance to obstacles to a max of distJoint so that it wont get any more value of getting further than a joint distance
        for (int i = 0; i < popSize; i++){
            // Test individual arm end position
            Vector3 endPosition = simulatedArm(popStates[i]);
            //calculated the fitness, or distance to the goal
            float fitness;
            //calculated only once, as this is the most CPU expensive element of the calculation 
            if(considerObstacles){
                float distAux2 = distanceObstacles(popStates[i]);
                fitness = 1/Vector3.Distance(simulatedArm(popStates[i]), goal.transform.position) - 1/Mathf.Pow(distAux2, 3) - 1/distanceObstaclesFromPoint(simulatedArm(popStates[i])); // also considering the tip of the arm, but in a lower cost
                print("b: " + 1/Mathf.Pow(distAux2, 3));
            }
            else
                fitness = 1/Vector3.Distance(simulatedArm(popStates[i]), goal.transform.position);
            print("a: " + 1/Vector3.Distance(simulatedArm(popStates[i]), goal.transform.position));
            //checks if its better and saves its configuration
            if(fitness > bestFitness){
                bestInd = i;
                bestFitness = fitness;
                robotState = new List<float>(popStates[bestInd]);
            }
        }
        previousBestfitness = bestFitness;
    }
    
    void fitnessEvaluation() {
        //the bestInd saves what is the best one in the popStates
        int bestInd = -1;
        //the distance to obstacles is now also taken into account to determine the fitness.
        //this calculation is needed in the case of the goal moving, so that the bestFitness is recalculated, if it were a gloval variable and this wasn't done, it would save a fitness from a different goal or, in other words, another problem
        float bestFitness = Mathf.Min(1/Vector3.Distance(simulatedArm(robotState), goal.transform.position), 10/GetComponent<CreateScene>().distJoints) - 1/Mathf.Pow(distanceObstacles(robotState), 2); //a if that doesnt require the square root to be calculated
        //this fitness calculation takes the distance to objectivo into a max value capped when the distance is smaller than a fourth of the distJoint and tops the distance to obstacles to a max of distJoint so that it wont get any more value of getting further than a joint distance
        for (int i = 0; i < popSize; i++){
            // Test individual arm end position
            Vector3 endPosition = simulatedArm(popStates[i]);
            //calculated the fitness, or distance to the goal
            
            float fitness = Mathf.Min(1/Vector3.Distance(simulatedArm(popStates[i]), goal.transform.position), 10/GetComponent<CreateScene>().distJoints) - 1/Mathf.Pow(distanceObstacles(popStates[i]), 2);
            print(Mathf.Min(1/Vector3.Distance(simulatedArm(popStates[i]), goal.transform.position), 10/GetComponent<CreateScene>().distJoints));
            print(1/Mathf.Pow(distanceObstacles(popStates[i]), 2));
            //checks if its better and saves its configuration
            if(fitness > bestFitness){
                bestInd = i;
                bestFitness = fitness;
                robotState = new List<float>(popStates[bestInd]);
            }
        }
        previousBestfitness = bestFitness;
    }
    
    void fitnessEvaluation() {
        //the bestInd saves what is the best one in the popStates
        int bestInd = -1;
        //the distance to obstacles is now also taken into account to determine the fitness.
        //this calculation is needed in the case of the goal moving, so that the bestFitness is recalculated, if it were a gloval variable and this wasn't done, it would save a fitness from a different goal or, in other words, another problem
        
        float bestFitness = Mathf.Min(1/Vector3.Distance(simulatedArm(robotState), goal.transform.position), 4/GetComponent<CreateScene>().distJoints) + Mathf.Min(GetComponent<CreateScene>().distJoints, Mathf.Sqrt(distanceObstacles(robotState)));
        //this fitness calculation takes the distance to objectivo into a max value capped when the distance is smaller than a fourth of the distJoint and tops the distance to obstacles to a max of distJoint so that it wont get any more value of getting further than a joint distance
        for (int i = 0; i < popSize; i++){
            // Test individual arm end position
            Vector3 endPosition = simulatedArm(popStates[i]);
            //calculated the fitness, or distance to the goal
            
            float fitness = Mathf.Min(1/Vector3.Distance(simulatedArm(popStates[i]), goal.transform.position), 4/GetComponent<CreateScene>().distJoints) + Mathf.Min(GetComponent<CreateScene>().distJoints, Mathf.Sqrt(distanceObstacles(popStates[i])));
            //checks if its better and saves its configuration
            
            if(fitness > bestFitness){
                bestInd = i;
                bestFitness = fitness;
                robotState = new List<float>(popStates[bestInd]);
            }
        }
        previousBestfitness = bestFitness;
    }
    

    

